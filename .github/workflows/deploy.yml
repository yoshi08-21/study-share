name: Deploy study_share

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build steps
      run: echo "Your build steps here"

    # Railsのテスト
    - name: Setup database
      run: |
        bundle exec rake db:create
        bundle exec rake db:schema:load

    - name: Cache Ruby gems
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Bundle install in backend directory
      run: |
        bundle config path vendor/bundle
        cd backend && bundle install --retry 3

    - name: Run tests in backend directory
      run: cd backend && bundle exec rspec

    # Nuxtのテスト
    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '16.14.2'

    - name: Cache Node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies in frontend directory
      run: cd frontend && npm install

    -name: Start Rails server
      run: cd backend && rails server &

    -name: Start Nuxt app
      run: cd frontend && npm run dev

    - name: Run Cypress tests
      run: cd frontend && npx cypress run

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # S3へのデプロイ
    - name: Configure AWS credentials for S3
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '16.14.2'

    - name: Cache Node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies in frontend directory
      run: cd frontend && npm install

    - name: Build Nuxt.js project in frontend directory
      run: cd frontend && npm run build

    - name: Deploy to S3 in frontend directory
      run: cd frontend && aws s3 sync dist/ s3://${{ secrets.AWS_S3_BUCKET }}

    # EC2へのデプロイ
    - name: Public IP
      id: ip
      uses: haythem/public-ip@v1.2

    - name: Configure AWS Credentials for EC2
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ap-northeast-1
        role-to-assume: ${{ secrets.EC2_ROLE_ARN }}
        role-session-name: github-actions-deploy-${{ github.event.repository.name }}-${{ github.run_number }}

    - name: Setup SSH key
      env:
        DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_PEM_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$DEPLOY_SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Authorize Security Group for SSH
      run: aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.0.3

    - name: Cache Ruby gems
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Bundle install in backend directory
      run: |
        bundle config path vendor/bundle
        cd backend && bundle install --retry 3

    # Capistranoでのデプロイ時に必要
    - name: Add SSH key to known hosts
      run: ssh-keyscan -H 3.115.171.176 >> ~/.ssh/known_hosts

    - name: Deploy using Capistrano in backend directory
      run:  cd backend && bundle exec cap production deploy

    - name: Revoke security group
      if: always()
      run: aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32


